import datetime
from flask import Flask
from flask_mail import Mail, Message
import sqlite3
import threading
import time
import schedule

app = Flask(__name__)
app.secret_key = 'd9ddb8a50af95ba9a24052cb926e3b64ef04578fb6dc3d9b6ab9a13eec464195'

# Configuración de Flask-Mail
app.config['MAIL_SERVER'] = 'smtp.gmail.com'
app.config['MAIL_PORT'] = 587
app.config['MAIL_USE_TLS'] = True
app.config['MAIL_USE_SSL'] = False
app.config['MAIL_USERNAME'] = 'tu_correo@gmail.com'
app.config['MAIL_PASSWORD'] = 'tu_contraseña_de_aplicación'
app.config['MAIL_DEFAULT_SENDER'] = 'tu_correo@gmail.com'

mail = Mail(app)

def get_db_connection():
    conn = sqlite3.connect('database.db')
    conn.row_factory = sqlite3.Row
    return conn

def enviar_correo(destinatario, asunto, cuerpo):
    msg = Message(asunto, recipients=[destinatario])
    msg.body = cuerpo
    try:
        mail.send(msg)
        print(f"Correo enviado a {destinatario}")
    except Exception as e:
        print(f"Error enviando correo: {e}")

def revisar_reportes():
    conn = get_db_connection()
    user = cu
    today = datetime.datetime.now()
    fecha_15_dias = today + datetime.timedelta(days=15)
    fecha_7_dias = today + datetime.timedelta(days=7)

    try:
        # Obtener reportes con fecha de solución en los próximos 15 y 7 días
        reportes = conn.execute(
            'SELECT * FROM Reportes WHERE fecha_solucion BETWEEN ? AND ?',
            (today, fecha_15_dias)
        ).fetchall()

        for reporte in reportes:
            usuario_id = reporte['usuario_id']
            nombre_sistema = reporte['asunto']
            fecha_solucion = reporte['fecha_solucion']
            correo_usuario = obtener_correo_usuario(usuario_id)  # Implementa esta función para obtener el correo

            # Enviar recordatorio por correo
            if fecha_solucion <= fecha_7_dias:
                asunto = f"Recordatorio urgente: El reporte '{nombre_sistema}' está a 7 días de su fecha de solución"
            else:
                asunto = f"Recordatorio: El reporte '{nombre_sistema}' está a 15 días de su fecha de solución"
            
            cuerpo = f"Estimado usuario, el reporte '{nombre_sistema}' tiene fecha de solución el {fecha_solucion}. Por favor tome las medidas necesarias."
            enviar_correo(correo_usuario, asunto, cuerpo)

            # Registrar la notificación en la base de datos
            conn.execute(
                'INSERT INTO Notificaciones (usuario_id, reporte_id, fecha_notificacion, mensaje) VALUES (?, ?, ?, ?)',
                (usuario_id, reporte['id'], today, asunto)
            )
            conn.commit()
    except Exception as e:
        print(f"Error al revisar reportes: {e}")
    finally:
        conn.close()

# Programar la revisión periódica
def iniciar_revisiones_periodicas():
    schedule.every().day.at("08:00").do(revisar_reportes)  # Revisa cada día a las 8:00 AM

    while True:
        schedule.run_pending()
        time.sleep(1)

# Iniciar el servidor Flask y la tarea en segundo plano
if __name__ == "__main__":
    # Iniciar la revisión de reportes en un hilo separado
    hilo_revisar_reportes = threading.Thread(target=iniciar_revisiones_periodicas)
    hilo_revisar_reportes.start()

    # Iniciar el servidor Flask
    app.run(debug=True)
